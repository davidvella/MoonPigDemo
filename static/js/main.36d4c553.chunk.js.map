{"version":3,"sources":["components/MoonPigCardGallery/MoonPigCardGallery.tsx","components/MoonPigCardItem/MoonPigCardItem.tsx","components/Gallery/Gallery.tsx","components/MoonPigCardDialog/MoonPigCardDialog.tsx","common/Constants.ts","common/ProductClient.ts","common/MoonPigClient.ts","ioc.ts","App.tsx","serviceWorker.ts","index.tsx","ioc.react.tsx","components/GalleryItem/GalleryItem.tsx"],"names":["MoonPigCardGallery","props","useState","isLoading","cards","isError","state","setState","client","useInjection","handleOnClick","event","product","onClick","handleOnKeyPress","onKeyPress","useEffect","Products","getCards","then","result","catch","error","global","console","log","status","title","subTitle","style","marginTop","type","justify","align","showSearch","width","placeholder","optionFilterProp","Option","value","textAlign","marginBottom","tip","size","map","card","index","Product","key","MoonPigGalleryItem","Title","ImageUrl","ProductImage","Link","Href","ImageAlt","galleryStyles","display","margin","gridTemplateColumns","gridGap","justifyItem","justifyContent","Radium","className","children","dialogStyles","dialogGrid","flexFlow","alignItems","dialogGridItem","optionButton","height","React","MoonpigProductNo","getCard","visible","onCancel","footer","ThumbnailUrl","level","min","max","defaultValue","Constants","GET_CORS_ANYWHERE","ProductClient","_client","this","numberOfCards","Promise","resolve","reject","a","get","res","data","moonpigProductNo","Axios","MoonPig","injectable","create","baseURL","MOON_PIG_SEARCH_URL","container","Container","bind","to","App","isModalOpen","Header","Content","padding","selectedMoonpigProductNo","MoonPigCardDialog","Footer","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","InversifyContext","createContext","Provider","identifier","useContext","Error","galleryItemStyles","galleryItem","overflow","justifyItems","maxHeight","unstyledButton","backgroundColor","backgroundRepeat","border","cursor","outline","transition","MozBoxShadow","WebkitBoxShadow","boxShadow","transform","hoverable","cover","alt","src","bodyStyle"],"mappings":"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","file":"static/js/main.36d4c553.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport { Spin, Select, Col, Row, Result } from \"antd\";\r\nimport React from \"react\";\r\nimport { Product } from \"../../common/Card\";\r\nimport { MoonPigGalleryItem } from \"../MoonPigCardItem/MoonPigCardItem\";\r\nimport Gallery from \"../Gallery/Gallery\";\r\nimport { IMoonPigClient } from \"../../common/IMoonPigClient\";\r\nimport { useInjection } from \"../../ioc.react\";\r\n\r\n/**\r\n * The Props of the Gallery Item\r\n */\r\ninterface MoonPigGalleryState {\r\n    isLoading: boolean,\r\n    cards: Product[],\r\n    isError: boolean\r\n}\r\n\r\n/**\r\n * The Props of the Gallery Item\r\n */\r\ninterface MoonPigGalleryProps {\r\n    /**\r\n     * Execute a JavaScript when a button is clicked.\r\n     */\r\n    onClick?: (event: React.MouseEvent, product: Product) => void\r\n    /**\r\n     * The onkeypress event occurs when the user presses a key (on the keyboard).\r\n     */\r\n    onKeyPress?: (event: React.KeyboardEvent, product: Product) => void\r\n}\r\n\r\n/**\r\n * Demo Gallery, for this I will be using a fixed size of 100 items,\r\n * the Gallery should get data per 'facet'. This current implementation would not be peformant\r\n * for large datasets. I would look to use a solution similar to https://github.com/bvaughn/react-virtualized.\r\n */\r\nexport const MoonPigCardGallery: React.FC<MoonPigGalleryProps> = (props) => {\r\n\r\n    const [state, setState] = useState<MoonPigGalleryState>({\r\n        isLoading: false,\r\n        cards: [] as Product[],\r\n        isError: false\r\n    });\r\n\r\n    const client = useInjection<IMoonPigClient>('moonPigClient');\r\n\r\n    const handleOnClick = (event: React.MouseEvent, product: Product) => {\r\n        if (props.onClick) {\r\n            props.onClick(event, product);\r\n        }\r\n    }\r\n\r\n    const handleOnKeyPress = (event: React.KeyboardEvent, product: Product) => {\r\n        if (props.onKeyPress) {\r\n            props.onKeyPress(event, product);\r\n        }\r\n    }\r\n\r\n    // Similar to componentDidMount and componentDidUpdate:\r\n    useEffect(() => {\r\n        const setCardData = () => {\r\n            // Get Cards from MoonPig\r\n            setState({\r\n                ...state,\r\n                cards: [] as Product[],\r\n                isLoading: true\r\n            });\r\n\r\n            client.Products.getCards(50)\r\n                .then(result => {\r\n                    setState({\r\n                        ...state,\r\n                        isLoading: false,\r\n                        cards: result.Products\r\n                    });\r\n                })\r\n                .catch(error => {\r\n                    global.console.log(error);\r\n                    setState({\r\n                        ...state,\r\n                        isError: true,\r\n                        isLoading: false\r\n                    });\r\n                })\r\n\r\n\r\n        };\r\n\r\n        setCardData();\r\n        // eslint-disable-next-line\r\n    }, []);\r\n\r\n    // Options here which would trigger fetch of data from client\r\n    return (\r\n        <div>\r\n            {state.isError ? (\r\n                <Result\r\n                    status=\"500\"\r\n                    title=\"500\"\r\n                    subTitle=\"Sorry, something went wrong.\"\r\n                />\r\n            ) : (\r\n                    <div>\r\n                        <div style={{ marginTop: 20 }}>\r\n                            <Row type=\"flex\" justify=\"space-around\" align=\"middle\">\r\n                                <Col >\r\n                                    <Select\r\n                                        showSearch\r\n                                        style={{ width: 150 }}\r\n                                        placeholder=\"Occasion\"\r\n                                        optionFilterProp=\"children\"\r\n                                    >\r\n                                        <Select.Option value=\"Anniversary\">Anniversary</Select.Option>\r\n                                        <Select.Option value=\"Birthday\">Birthday</Select.Option>\r\n                                    </Select>\r\n                                </Col>\r\n                                <Col >\r\n                                    <Select\r\n                                        showSearch\r\n                                        style={{ width: 150 }}\r\n                                        placeholder=\"Recipient\"\r\n                                        optionFilterProp=\"children\"\r\n                                    >\r\n                                        <Select.Option value=\"Auntie\">Auntie</Select.Option>\r\n                                        <Select.Option value=\"Auntie & Uncle\">Auntie & Uncle</Select.Option>\r\n                                    </Select>\r\n                                </Col>\r\n                                <Col >\r\n                                    <Select\r\n                                        showSearch\r\n                                        style={{ width: 150 }}\r\n                                        placeholder=\"Design\"\r\n                                        optionFilterProp=\"children\"\r\n                                    >\r\n                                        <Select.Option value=\"Arty\">Arty</Select.Option>\r\n                                        <Select.Option value=\"Cartoon\">Cartoon</Select.Option>\r\n                                    </Select>\r\n                                </Col>\r\n                                <Col >\r\n                                    <Select\r\n                                        showSearch\r\n                                        style={{ width: 150 }}\r\n                                        placeholder=\"Age\"\r\n                                        optionFilterProp=\"children\"\r\n                                    >\r\n                                        <Select.Option value=\"Adult\">Adult</Select.Option>\r\n                                        <Select.Option value=\"Baby\">Baby</Select.Option>\r\n                                    </Select>\r\n                                </Col>\r\n                                <Col >\r\n                                    <Select\r\n                                        showSearch\r\n                                        style={{ width: 150 }}\r\n                                        placeholder=\"Theme\"\r\n                                        optionFilterProp=\"children\"\r\n                                    >\r\n                                        <Select.Option value=\"Animals\">Animals</Select.Option>\r\n                                        <Select.Option value=\"Cars & Bikes\">Cars & Bikes</Select.Option>\r\n                                    </Select>\r\n                                </Col>\r\n                            </Row>\r\n                        </div>\r\n                        <div style={{ marginTop: 30 }}>\r\n                            {state.isLoading ? (\r\n                                <div style={{ textAlign: 'center', marginBottom: 20 }}>\r\n                                    <Spin tip=\"Loading...\" size=\"large\" />\r\n                                </div>\r\n                            ) : (\r\n                                    <div>\r\n                                        <Gallery>\r\n                                            {state.cards.map((card, index) => {\r\n                                                return <MoonPigGalleryItem Product={card} key={index} onClick={handleOnClick} onKeyPress={handleOnKeyPress} />\r\n                                            })}\r\n                                        </Gallery>\r\n                                    </div>\r\n                                )}\r\n                        </div>\r\n                    </div>\r\n                )}\r\n        </div>\r\n    );\r\n};","import * as React from \"react\";\r\nimport { Product } from \"../../common/Card\";\r\nimport GalleryItem from \"../GalleryItem/GalleryItem\";\r\n\r\n/**\r\n * The Props of the Gallery Item\r\n */\r\ninterface MoonPigGalleryItemProps {\r\n    /**\r\n     * MoonPig Product\r\n     */\r\n    Product: Product\r\n    /**\r\n     * Execute a JavaScript when a button is clicked.\r\n     */\r\n    onClick?: (event: React.MouseEvent, product: Product) => void\r\n    /**\r\n     * The onkeypress event occurs when the user presses a key (on the keyboard).\r\n     */\r\n    onKeyPress?: (event: React.KeyboardEvent, product: Product) => void\r\n}\r\n\r\n/**\r\n * A card in the gallery\r\n */\r\nexport const MoonPigGalleryItem: React.FC<MoonPigGalleryItemProps> = (props) => {\r\n\r\n    const handleOnClick = (event: React.MouseEvent) => {\r\n        if (props.onClick) {\r\n            props.onClick(event, props.Product);\r\n        }\r\n    }\r\n\r\n    const handleOnKeyPress = (event: React.KeyboardEvent) => {\r\n        if (props.onKeyPress) {\r\n            props.onKeyPress(event, props.Product);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <GalleryItem Title={props.Product.Title}\r\n                ImageUrl={props.Product.ProductImage.Link.Href}\r\n                ImageAlt={props.Product.Title}\r\n                onClick={handleOnClick}\r\n                onKeyPress={handleOnKeyPress}></GalleryItem>\r\n        </div>\r\n    );\r\n};\r\n","import * as React from \"react\";\r\nimport Radium from 'radium';\r\n\r\nconst galleryStyles = {\r\n    /* Margin value should be half of grid-gap value as margins on flex items don't collapse */\r\n    display: 'grid',\r\n    margin: '-1rem -1rem',\r\n    gridTemplateColumns: 'repeat(auto-fit, minmax(280px, 280px))',\r\n    gridGap: '2rem',\r\n    justifyItem:'center',\r\n    justifyContent: 'space-evenly'\r\n};\r\n\r\ninterface GalleryProps {\r\n    /**\r\n     * @ignore\r\n     */\r\n    className?: string\r\n}\r\n\r\nconst Gallery: React.FC<GalleryProps> = (props) => <aside>\r\n    <div style={galleryStyles} className={props.className}>\r\n        {props.children}\r\n    </div>\r\n</aside>\r\n\r\nexport default Radium(Gallery);","import * as React from \"react\";\r\nimport { Modal, Spin, Button, InputNumber } from 'antd';\r\nimport { useInjection } from \"../../ioc.react\";\r\nimport { IMoonPigClient } from \"../../common/IMoonPigClient\";\r\nimport { useState } from \"react\";\r\nimport { ICardInformation } from \"../../common/Card\";\r\nimport GalleryItem from \"../GalleryItem/GalleryItem\";\r\nimport Radium from \"radium\";\r\nimport Title from \"antd/lib/typography/Title\";\r\n\r\n\r\n/**\r\n * The Props of the Dialog \r\n */\r\ninterface MoonPigDialogProps {\r\n    /**\r\n     * The MoonPigProductNo\r\n     */\r\n    MoonpigProductNo?: string\r\n    /**\r\n     * Whether the dialog is visible or not.\r\n     */\r\n    visible?: boolean;\r\n    /**\r\n     * Whether the dialog is fetching data\r\n     */\r\n    isLoading?: boolean;\r\n    /**\r\n     * Action when user closes the dialog\r\n     */\r\n    onCancel?: (e: React.MouseEvent<HTMLElement>) => void;\r\n}\r\n\r\n/**\r\n * The Props of the Gallery Item\r\n */\r\ninterface MoonPigDialogState {\r\n    isLoading: boolean,\r\n    card: ICardInformation\r\n}\r\n\r\nconst dialogStyles = {\r\n    dialogGrid: {\r\n        display: 'flex',\r\n        flexFlow: 'row wrap',\r\n        margin: '0 0',\r\n        alignItems: 'center',\r\n        justifyContent: 'center'\r\n    },\r\n    dialogGridItem: {\r\n        margin: 10\r\n    },\r\n    optionButton: {\r\n        width: '100%',\r\n        height: 76,\r\n        marginTop: 10\r\n    }\r\n};\r\n\r\n/**\r\n * Item in the gallery\r\n */\r\nconst MoonPigCardDialog: React.FC<MoonPigDialogProps> = props => {\r\n\r\n    const [state, setState] = useState<MoonPigDialogState>({\r\n        isLoading: false,\r\n        card: {} as ICardInformation\r\n    });\r\n\r\n    const client = useInjection<IMoonPigClient>('moonPigClient');\r\n\r\n    // Similar to componentDidMount and componentDidUpdate:\r\n    React.useEffect(() => {\r\n        const setCardData = () => {\r\n            // Get Cards from MoonPig\r\n            setState({\r\n                ...state,\r\n                isLoading: true\r\n            });\r\n\r\n            if (props.MoonpigProductNo) {\r\n                client.Products.getCard(props.MoonpigProductNo)\r\n                    .then(result => {\r\n                        setState({\r\n                            ...state,\r\n                            isLoading: false,\r\n                            card: result\r\n                        });\r\n                    })\r\n                    .catch(error => {\r\n                        global.console.log(error);\r\n                        setState({\r\n                            ...state,\r\n                            isLoading: false\r\n                        });\r\n                    })\r\n            }\r\n        };\r\n\r\n        setCardData();\r\n        // eslint-disable-next-line\r\n    }, [props.MoonpigProductNo]);\r\n\r\n    return (\r\n        <div>\r\n            <Modal\r\n                visible={props.visible}\r\n                onCancel={props.onCancel}\r\n                footer={null}\r\n                width={900}\r\n            >\r\n                {state.isLoading ? (\r\n                    <div >\r\n                        <div style={{ textAlign: 'center', marginTop: 20 }}>\r\n                            <Spin tip=\"Loading...\" size=\"large\" />\r\n                        </div>\r\n                    </div>\r\n                ) : (\r\n                        <div style={dialogStyles.dialogGrid}>\r\n                            <div style={dialogStyles.dialogGridItem}>\r\n                                <GalleryItem Title={state.card.Title}\r\n                                    ImageUrl={state.card.ThumbnailUrl}\r\n                                    ImageAlt={state.card.Title}></GalleryItem>\r\n                            </div>\r\n                            <div style={dialogStyles.dialogGridItem}>\r\n                                <table>\r\n                                    <tr>\r\n                                        <Title level={3}>{state.card.Title}</Title>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <Button style={dialogStyles.optionButton}>Standard Card</Button>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <Button style={dialogStyles.optionButton}>Large Card</Button>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <Button style={dialogStyles.optionButton}>Card Pack</Button>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <Button style={dialogStyles.optionButton}>Giant Card</Button>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <div style={dialogStyles.optionButton}>\r\n                                            Quantity: <InputNumber min={1} max={10} defaultValue={1} />\r\n                                        </div>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <Button style={dialogStyles.optionButton} type=\"primary\">Buy Me</Button>\r\n                                    </tr>\r\n                                </table>\r\n                            </div>\r\n\r\n                        </div>\r\n                    )}\r\n            </Modal>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Radium(MoonPigCardDialog);","export class Constants {\r\n  public static readonly GET_CORS_ANYWHERE =\r\n    \"https://cors-anywhere.herokuapp.com/\";\r\n}\r\n","import { AxiosInstance } from \"axios\";\r\nimport { IProductsClient } from \"./IProductsClient\";\r\nimport { ICardCollection, ICardInformation } from \"./Card\";\r\nimport Axios from \"axios\";\r\n\r\nexport class ProductClient implements IProductsClient {\r\n  /**\r\n   * A lightweight REST and HTTP client optimized for use with TypeScript with generics and async await.\r\n   */\r\n  _client: AxiosInstance;\r\n\r\n  constructor(client: AxiosInstance) {\r\n    this._client = client;\r\n  }\r\n\r\n  /**\r\n   * Get Cards from the gallery\r\n   */\r\n  public async getCards(numberOfCards: number): Promise<ICardCollection> {\r\n    return new Promise<ICardCollection>(async (resolve, reject) => {\r\n      this._client\r\n        .get<ICardCollection>(\r\n          `/products?size=${numberOfCards}&fq=card_shop_id:1`\r\n        )\r\n        .then(res => {\r\n          resolve(res.data);\r\n        })\r\n        .catch(error => {\r\n          reject(error);\r\n        });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get Card from the gallery\r\n   */\r\n  public getCard(moonpigProductNo: string): Promise<ICardInformation> {\r\n    return new Promise<ICardInformation>(async (resolve, reject) => {\r\n      Axios.get<ICardInformation>(\r\n          `https://cors-anywhere.herokuapp.com/https://www.moonpig.com/uk/api/product/product/?mpn=${moonpigProductNo}`\r\n        )\r\n        .then(res => {\r\n          resolve(res.data);\r\n        })\r\n        .catch(error => {\r\n          reject(error);\r\n        });\r\n    });\r\n  }\r\n}\r\n","import Axios, { AxiosInstance } from \"axios\";\r\nimport { Constants } from \"./Constants\";\r\nimport { IMoonPigClient } from \"./IMoonPigClient\";\r\nimport { ProductClient } from \"./ProductClient\";\r\nimport { IProductsClient } from \"./IProductsClient\";\r\nimport { injectable } from \"inversify\";\r\n\r\n/**\r\n * Class used to make Rest Calls to the moon pig web api and to be faked for testing purposes.\r\n * In real world I would flesh this out to be used by everyone and for test environments where\r\n * applicable.\r\n */\r\n@injectable()\r\nexport class MoonPig implements IMoonPigClient {\r\n  /**\r\n   * Search Url\r\n   */\r\n  private static readonly MOON_PIG_SEARCH_URL =\r\n    \"https://search.moonpig.com/api\";\r\n\r\n  /**\r\n   * A lightweight REST and HTTP client optimized for use with TypeScript with generics and async await.\r\n   */\r\n  _client: AxiosInstance;\r\n\r\n  constructor() {\r\n    this._client = Axios.create({\r\n      baseURL: Constants.GET_CORS_ANYWHERE + MoonPig.MOON_PIG_SEARCH_URL\r\n    });\r\n  }\r\n\r\n  /**\r\n   * The Product Client\r\n   */\r\n  public get Products(): IProductsClient {\r\n    return new ProductClient(this._client);\r\n  }\r\n}\r\n","\r\nimport { Container } from \"inversify\";\r\nimport { IMoonPigClient } from \"./common/IMoonPigClient\";\r\nimport { MoonPig } from \"./common/MoonPigClient\";\r\n\r\nexport const container = new Container();\r\ncontainer.bind<IMoonPigClient>(\"moonPigClient\").to(MoonPig);\r\n\r\n","import React, { useState } from 'react';\nimport { MoonPigCardGallery } from './components/MoonPigCardGallery/MoonPigCardGallery';\nimport { Provider } from './ioc.react';\nimport { container } from './ioc';\nimport { Layout } from 'antd';\nimport { Product } from './common/Card';\nimport MoonPigCardDialog from './components/MoonPigCardDialog/MoonPigCardDialog';\n\n\n\n/**\n * The Props of the Gallery Item\n */\ninterface AppState {\n  isModalOpen: boolean,\n  selectedMoonpigProductNo?: string\n}\n\nconst App: React.FC = () => {\n\n  const [state, setState] = useState<AppState>({\n    isModalOpen: false\n  });\n\n  const handleCancel = () => {\n    setState({\n      ...state,\n      isModalOpen: false\n    })\n  };\n\n  const handleOnClick = (event: React.MouseEvent, product: Product) => {\n    setState({\n      isModalOpen: true,\n      selectedMoonpigProductNo: product.MoonpigProductNo\n    })\n  }\n\n  return (\n    <Layout className=\"layout\">\n      <Layout.Header>\n      </Layout.Header>\n      <Layout.Content style={{ padding: '0 50px' }}>\n        <Provider container={container}>\n          <MoonPigCardGallery onClick={handleOnClick} />\n          <MoonPigCardDialog visible={state.isModalOpen} onCancel={handleCancel} MoonpigProductNo={state.selectedMoonpigProductNo}/>\n        </Provider>\n      </Layout.Content>\n      <Layout.Footer style={{ textAlign: 'center' }}>David Vella ©2019</Layout.Footer>\n    </Layout>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { useContext } from 'react';\r\nimport { Container, interfaces } from 'inversify';\r\n// Need for dependency injection\r\nimport \"reflect-metadata\";\r\n\r\nconst InversifyContext = React.createContext<{ container: Container | null }>({ container: null });\r\n\r\ntype Props = {\r\n    container: Container;\r\n};\r\n\r\n/**\r\n * Provider for react components needed for dependency injection\r\n * @param props \r\n */\r\nexport const Provider: React.FC<Props> = (props) => {\r\n    return (\r\n        <InversifyContext.Provider value={{ container: props.container }}>\r\n            {props.children}\r\n        </InversifyContext.Provider>\r\n    );\r\n};\r\n\r\nexport function useInjection<T>(identifier: interfaces.ServiceIdentifier<T>) {\r\n    const { container } = useContext(InversifyContext);\r\n    if (!container) { throw new Error(); }\r\n    return container.get<T>(identifier);\r\n};","import * as React from \"react\";\r\nimport Radium from 'radium';\r\nimport { Card } from 'antd';\r\n\r\nconst galleryItemStyles = {\r\n  galleryItem: {\r\n    /* Margin value should be half of grid-gap value as margins on flex items don't collapse */\r\n    display: 'grid',\r\n    overflow: 'hidden',\r\n    alignItems:'center',\r\n    justifyItems:'center',\r\n    width:'273.59px',\r\n    maxHeight:'388.07px'\r\n  },  \r\n  unstyledButton: {\r\n    backgroundColor: 'Transparent',\r\n    backgroundRepeat:'no-repeat',\r\n    border: 'none',\r\n    cursor:'pointer',\r\n    overflow: 'hidden',\r\n    outline:'none',\r\n    transition: 'all .3s ease-in-out',\r\n    ':hover': {\r\n      MozBoxShadow: 'rgba(0, 0, 0, 0.22) 0px 19px 43px',\r\n      WebkitBoxShadow: 'rgba(0, 0, 0, 0.22) 0px 19px 43px',\r\n      boxShadow: 'rgba(0, 0, 0, 0.22) 0px 19px 43px',\r\n      transform: 'translate3d(0px, -1px, 0px)'\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * The Props of the Gallery Item\r\n */\r\ninterface GalleryItemProps {\r\n  /**\r\n   * The Title text of the Gallery Item\r\n   */\r\n  Title: string\r\n  /**\r\n   * The URL (web address) of the image.\r\n   */\r\n  ImageUrl: string\r\n  /**\r\n   * The alt attribute provides alternative information for an image if a user for some reason cannot view it.\r\n   */\r\n  ImageAlt: string\r\n  /**\r\n   * Execute a JavaScript when a button is clicked.\r\n   */\r\n  onClick?: (event: React.MouseEvent) => void\r\n  /**\r\n   * The onkeypress event occurs when the user presses a key (on the keyboard).\r\n   */\r\n  onKeyPress?: (event: React.KeyboardEvent) => void\r\n}\r\n\r\n/**\r\n * Item in the gallery\r\n */\r\nconst GalleryItem: React.FC<GalleryItemProps> =\r\n  ({ Title, ImageUrl, onClick, onKeyPress, ImageAlt }) => (\r\n    <div>\r\n      <button style={galleryItemStyles.unstyledButton} onKeyPress={onKeyPress} title={Title}>\r\n        <Card\r\n          hoverable\r\n          cover={<img alt={ImageAlt} src={ImageUrl} />}\r\n          onClick={onClick}\r\n          style={galleryItemStyles.galleryItem}\r\n          bodyStyle={{\r\n            display:\"none\"\r\n          }}\r\n        >\r\n        </Card>\r\n      </button>\r\n    </div>\r\n  )\r\n\r\nexport default Radium(GalleryItem);"],"sourceRoot":""}